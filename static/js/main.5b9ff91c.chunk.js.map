{"version":3,"sources":["contianers/FieldsList/Field.js","model/Fields/Settings/Setting.js","model/Fields/Field.js","model/Fields/Settings/DefaultField.js","model/Fields/Settings/basic/Text.js","model/Fields/Settings/specialized/HTML.js","model/Fields/Settings/basic/ImagePicker.js","model/Fields/Settings/specialized/RichText.js","model/Fields/Settings/specialized/VideoUrl.js","model/Fields/Settings/basic/Textarea.js","model/Fields/Settings/basic/Range.js","model/Fields/Settings/specialized/Color.js","model/Fields/Settings/specialized/FontPicker.js","model/Fields/Settings/basic/Checkbox.js","model/Fields/Settings/basic/Radio.js","model/Fields/Settings/basic/Select.js","redux/reducers/fields.js","model/Fields/FieldsController.js","contianers/FieldsList/FieldsList.js","contianers/SelectedFields/SelectedFieldTemplate.js","contianers/SelectedFields/SelectedFields.js","contianers/Schema/Schema.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["connect","dispatch","addField","fieldType","type","updateSchema","props","className","onClick","field","Setting","name","TYPE_TEXT","required","value","this","TYPE_NUMBER","Number","TYPE_TEXTAREA","Field","settings","setting","settingsToSchema","DefaultField","TextField","HTMLField","ImagePickerField","RichTextField","VideoUrlField","TextareaField","RangeField","ColorField","FontPickerField","CheckboxField","RadioField","SelectField","initialState","selectedFields","schema","blocks","presets","FieldsControllerMain","settingsStructures","Object","keys","FieldsList","getAllFields","map","index","key","removeField","fieldIndex","updateSettingValue","style","marginBottom","Accordion","AccordionSummary","expandIcon","draggable","from","onDragStart","event","onDragStartHandle","onDragEnd","onDragEndHandle","display","justifyContent","alignItems","padding","margin","width","color","height","FormControlLabel","aria-label","stopPropagation","onFocus","control","AccordionDetails","flexWrap","marginTop","label","onChange","target","SelectedFields","onDragOverHandle","preventDefault","styles","dropZone","border","transition","state","to","toNext","opacity","newFrom","getAttribute","setState","canBeMoved","background","swapFields","flexDirection","forceUpdate","flex","overflowY","paddingBottom","paddingRight","onDragOver","onDragEnter","onDragEnterHandle","onDragLeave","onDragLeaveHandle","onDrop","ondropHandle","bind","React","Component","fields","setSchemaName","schemaName","defaultValue","variant","id","cols","rows","JSON","stringify","console","log","App","Boolean","window","location","hostname","match","combineReducers","action","push","getSettingsForJSON","getFieldByType","splice","moveElement","res","i","length","setValue","createStore","rootReducer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b9ff91c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nfunction Field(props){\r\n    return(\r\n        <div className=\"field-item-wrap\">\r\n            <div className=\"field-item shadow\"\r\n                 onClick={ () => {\r\n                     props.addField(props.field);\r\n                     props.updateSchema();\r\n                 }}>{props.field}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addField: (fieldType) => dispatch({type: 'ADD_FIELD', fieldType}),\r\n        updateSchema: () => dispatch({type: 'UPDATE_SCHEMA'})\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Field);","/**\r\n * Setting\r\n */\r\nexport default class Setting{\r\n    static TYPE_TEXT = 'text';\r\n    static TYPE_TEXTAREA = 'textarea';\r\n    static TYPE_NUMBER = 'number';\r\n    /**\r\n     * @param name {string}\r\n     * @param type {string}\r\n     * @param required {boolean}\r\n     */\r\n    constructor(name, type = Setting.TYPE_TEXT, required = false, value = \"\") {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.required = required;\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * set setting Value\r\n     * @param value {any}\r\n     */\r\n    setValue(value){\r\n        this.value = this.type === Setting.TYPE_NUMBER ? Number(value) : value;\r\n        return true;\r\n    }\r\n\r\n}","/**\r\n *  Field\r\n */\r\nexport default class Field{\r\n\r\n    constructor() {\r\n        /**\r\n         *\r\n         * @type {Setting[]}\r\n         */\r\n        this.settings = [];\r\n    }\r\n\r\n    getIdField(){\r\n        for (const setting of this.settings) {\r\n            if( setting.name === 'id' ){\r\n                return setting.value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toSchema\r\n     * @return {object}\r\n     */\r\n    getSettingsForJSON(){\r\n        let settingsToSchema = {type: this.type};\r\n        for (let setting of this.settings) {\r\n            if( setting.value !== \"\" ){\r\n                settingsToSchema[setting.name] = setting.value;\r\n            }\r\n            if( setting.required && setting.value === \"\" ){\r\n                settingsToSchema[setting.name] = \"FIELD IS REQUIRED\";\r\n            }\r\n        }\r\n        return settingsToSchema;\r\n    }\r\n}","import Setting from './Setting';\r\nimport Field from '../Field';\r\n\r\nexport default class DefaultField extends Field{\r\n    constructor( type ) {\r\n        super();\r\n        this.type = type;\r\n        this.settings = [\r\n            new Setting('id', 'text', true, `${type}-id`),\r\n            new Setting('label', 'text', true, 'label'),\r\n            new Setting('info', 'text'),\r\n        ]\r\n    }\r\n}\r\n\r\n\r\n\r\n","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class TextField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'text';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, \"text-id\"),\r\n            new Setting('label', 'text', true, \"label\"),\r\n            new Setting('default', 'text'),\r\n            new Setting('info', 'text'),\r\n            new Setting('placeholder', 'text')\r\n        ]\r\n    }\r\n}\r\n","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class HTMLField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'html';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, 'html_area'),\r\n            new Setting('label', 'text', true, 'Custom HTML'),\r\n            new Setting('default', 'textarea', false, '<div><p>Some HTML content</p></div>'),\r\n            new Setting('info', 'text'),\r\n        ]\r\n    }\r\n}","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class ImagePickerField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'image_picker';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, \"image-id\"),\r\n            new Setting('label', 'text', true, \"image\"),\r\n            new Setting('default', 'textarea'),\r\n            new Setting('info', 'text'),\r\n        ]\r\n    }\r\n}\r\n","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class RichTextField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'richtext';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, 'column_richtext'),\r\n            new Setting('label', 'text', true, 'Text'),\r\n            new Setting('default', 'textarea', false, '<p>Default <em>richtext</em> <a href=\"https://example.com\">content</a></p>'),\r\n            new Setting('info', 'text'),\r\n        ]\r\n    }\r\n}","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class VideoUrlField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'video_url';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, 'video_url'),\r\n            new Setting('label', 'text', true, 'Video URL'),\r\n            new Setting('accept', 'text', false, ['youtube', 'vimeo']),\r\n            new Setting('default', 'text', false, 'https://www.youtube.com/watch?v=_9VUPq3SxOc'),\r\n            new Setting('info', 'text'),\r\n        ]\r\n    }\r\n}","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class TextareaField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'textarea';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, \"textarea-id\"),\r\n            new Setting('label', 'text', true, \"textarea\"),\r\n            new Setting('default', 'textarea'),\r\n            new Setting('info', 'text'),\r\n            new Setting('placeholder', 'text')\r\n        ]\r\n    }\r\n}","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class RangeField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'range';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, \"id\"),\r\n            new Setting('label', 'text', true, \"Text\"),\r\n            new Setting('min', Setting.TYPE_NUMBER, true, 0),\r\n            new Setting('max', 'number', true, 0),\r\n            new Setting('step', 'number', true, 0),\r\n            new Setting('unit', 'text'),\r\n            new Setting('default', 'text'),\r\n            new Setting('info', 'text'),\r\n        ]\r\n    }\r\n}\r\n","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class ColorField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'color';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, 'color-id'),\r\n            new Setting('label', 'text', true, 'color'),\r\n            new Setting('default', 'color'),\r\n            new Setting('info', 'text'),\r\n        ]\r\n    }\r\n}","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class FontPickerField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'font_picker';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, 'font_picker-id'),\r\n            new Setting('label', 'text', true, 'font_picker'),\r\n            new Setting('default', 'text', false, 'helvetica_n4'),\r\n            new Setting('info', 'text'),\r\n        ]\r\n    }\r\n}","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class CheckboxField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'checkbox';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, \"id\"),\r\n            new Setting('label', 'text', true, \"Text\"),\r\n            new Setting('default', false),\r\n            new Setting('info', 'text'),\r\n        ]\r\n    }\r\n}\r\n","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class RadioField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'radio';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, \"test id\"),\r\n            new Setting('label', 'text', true, \"label\"),\r\n            new Setting('options', 'radio', true, []),\r\n            new Setting('default', 'text', false, \"default\"),\r\n            new Setting('info', 'text', false, \"test info\"),\r\n        ]\r\n    }\r\n}\r\n","import Setting from '../Setting';\r\nimport Field from '../../Field';\r\n\r\nexport default class SelectField extends Field{\r\n    constructor() {\r\n        super();\r\n        this.type = 'select';\r\n        this.settings = [\r\n            new Setting('id', 'text', true, \"id\"),\r\n            new Setting('label', 'text', true, \"Text\"),\r\n            new Setting('options', 'select', true, []),\r\n            new Setting('default', 'text'),\r\n            new Setting('info', 'text'),\r\n        ]\r\n    }\r\n}\r\n","import FieldsController from '../../model/Fields/FieldsController';\r\n\r\nconst initialState = {\r\n    selectedFields: [],\r\n    schema: {\r\n        name: \"Section name\",\r\n        // max_blocks: 10,\r\n        settings: [\r\n\r\n        ],\r\n        blocks:[\r\n            {\r\n                type: 'block',\r\n                name: \"Block\",\r\n                settings: [\r\n\r\n                ],\r\n            }\r\n        ],\r\n        presets: [\r\n            {\r\n                name: \"Section name\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nexport const FieldsControllerMain = new FieldsController();\r\nexport default function (state= initialState, action){\r\n    let selectedFields = [...state.selectedFields];\r\n    let schema = state.schema;\r\n\r\n    const updateSchema = () => {\r\n        schema.settings = [];\r\n        for (let field of selectedFields) {\r\n            schema.settings.push( field.getSettingsForJSON() );\r\n        }\r\n    }\r\n\r\n    switch (action.type) {\r\n        case 'ADD_FIELD':\r\n            selectedFields.push( FieldsControllerMain.getFieldByType(action.fieldType) );\r\n            updateSchema();\r\n            return { selectedFields: [...selectedFields], schema: {...schema} }\r\n        case 'REMOVE_FIELD':\r\n            selectedFields.splice(action.fieldIndex, 1);\r\n            updateSchema();\r\n            return { selectedFields: [...selectedFields], schema: {...schema} }\r\n        case 'SWITCH_SELECTED_FIELDS':\r\n            console.log('swap', action.from, action.to);\r\n            let moveElement = selectedFields[action.from];\r\n            let res = [];\r\n\r\n            for (let i = 0; i < selectedFields.length; i++) {\r\n                if( i !== action.from ){\r\n                    if( i === action.to ){\r\n                        res.push( moveElement );\r\n                        res.push( selectedFields[i] );\r\n                    }else{\r\n                        res.push( selectedFields[i] );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if move to end\r\n            if( selectedFields.length !== res.length ){\r\n                res.push( moveElement );\r\n            }\r\n            selectedFields = res;\r\n            updateSchema();\r\n            return { selectedFields: [...selectedFields], schema: {...schema} }\r\n        case 'UPDATE_SETTING_VALUE':\r\n            selectedFields[action.fieldIndex].settings[action.index].setValue(action.value)\r\n            updateSchema();\r\n            return { selectedFields: [...selectedFields], schema: {...schema} }\r\n        case 'UPDATE_SCHEMA':\r\n            updateSchema();\r\n            return { ...state, schema: {...schema}  }\r\n        case 'SET_SCHEMA_TITLE':\r\n            schema.name = action.schemaName;\r\n            schema.presets[0].name = action.schemaName;\r\n            updateSchema();\r\n            return { ...state, schema: {...schema}  }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import DefaultField from './Settings/DefaultField';\r\nimport TextField from './Settings/basic/Text';\r\nimport HTMLField from './Settings/specialized/HTML';\r\nimport ImagePickerField from './Settings/basic/ImagePicker';\r\nimport RichTextField from './Settings/specialized/RichText';\r\nimport VideoUrlField from './Settings/specialized/VideoUrl';\r\nimport TextareaField from './Settings/basic/Textarea';\r\nimport RangeField from './Settings/basic/Range';\r\nimport ColorField from './Settings/specialized/Color';\r\nimport FontPickerField from './Settings/specialized/FontPicker';\r\nimport CheckboxField from './Settings/basic/Checkbox';\r\nimport RadioField from './Settings/basic/Radio';\r\nimport SelectField from './Settings/basic/Select';\r\n\r\nexport default class FieldsController{\r\n    constructor() {\r\n        this.settingsStructures = {\r\n            'text': () => { return new TextField() },\r\n            'textarea': () => { return new TextareaField() },\r\n            'image_picker': () => { return new ImagePickerField() },\r\n            'radio': () => { return new RadioField() },\r\n            'select': () => { return new SelectField() },\r\n            'checkbox': () => { return new CheckboxField() },\r\n            'range': () => { return new RangeField() },\r\n            'color': () => { return new ColorField() },\r\n            'font_picker': () => { return new FontPickerField() },\r\n            'collection': () => { return new DefaultField('collection') },\r\n            'product': () => { return new DefaultField('product') },\r\n            'blog': () => { return new DefaultField('blog') },\r\n            'page': () => { return new DefaultField('page') },\r\n            'link_list': () => { return new DefaultField('link_list') },\r\n            'url': () => { return new DefaultField('url') },\r\n            'video_url': () => { return new VideoUrlField() },\r\n            'richtext': () => { return new RichTextField() },\r\n            'html': () => { return new HTMLField() },\r\n            'article': () => { return new DefaultField('article') }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param type\r\n     * @return {Field}\r\n     */\r\n    getFieldByType(type){\r\n        return this.settingsStructures[type]();\r\n    }\r\n\r\n    /**\r\n     * Get All Fields\r\n     * @return {string[]}\r\n     */\r\n    getAllFields(){\r\n        return Object.keys(this.settingsStructures);\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport Field from './Field';\r\nimport {FieldsControllerMain} from '../../redux/reducers/fields';\r\n\r\nfunction FieldsList() {\r\n    return (\r\n        <div className=\"FieldsList\">\r\n            <h3 className=\"heading\">Fields</h3>\r\n            <div className=\"all-field-list custom-scrollbar\">\r\n                { FieldsControllerMain && FieldsControllerMain.getAllFields().map( (field, index) => (\r\n                    <div key={index}>\r\n                        <Field field={field}/>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FieldsList;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {FormControlLabel} from '@material-ui/core';\r\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\r\n\r\nfunction SelectedFieldTemplate(props){\r\n    return(\r\n        <div className=\"field-item-wrap\" style={{ marginBottom: '0' }}>\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    draggable=\"true\"\r\n                    from={props.from}\r\n                    onDragStart={ (event) => { props.onDragStartHandle(event); }}\r\n                    onDragEnd={ (event) => { props.onDragEndHandle(event) }}\r\n                >\r\n\r\n                    <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center',padding: '12px 0', margin: '-12px 0', width: '100%'}}>\r\n\r\n                        <DragIndicatorIcon\r\n                            style={{color: 'rgba(0, 0, 0, 0.54)', width: '18px', height: '18px'}}\r\n                        />\r\n\r\n                        <span>{props.field.type}</span>\r\n\r\n                        <FormControlLabel\r\n                            aria-label=\"Acknowledge\"\r\n                            onClick={(event) => event.stopPropagation()}\r\n                            onFocus={(event) => event.stopPropagation()}\r\n                            control={\r\n                                <div>\r\n                                    <CloseIcon\r\n                                        style={{color: 'rgba(0, 0, 0, 0.54)', width: '18px', height: '18px'}}\r\n                                        onClick={() => {\r\n                                            props.removeField(props.fieldIndex);\r\n                                        }}/>\r\n                                </div>\r\n                            }\r\n                        />\r\n\r\n                    </div>\r\n\r\n\r\n                </AccordionSummary>\r\n\r\n                <AccordionDetails style={{ flexWrap: 'wrap' }}>\r\n                    <div style={{ width: '100%' }}>\r\n                        { props.field.settings && props.field.settings.map( (setting, index) => {\r\n                            return(\r\n                                <TextField\r\n                                    key={index}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        marginTop: '10px'\r\n                                    }}\r\n                                    label={setting.name}\r\n                                    onChange={event => {\r\n                                        props.updateSettingValue(event.target.value, index, props.fieldIndex);\r\n                                    }}/>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        removeField: (fieldIndex) => dispatch({type: 'REMOVE_FIELD', fieldIndex}),\r\n        updateSettingValue: (value, index, fieldIndex) => dispatch({type: 'UPDATE_SETTING_VALUE', value, index, fieldIndex})\r\n    }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(SelectedFieldTemplate);\r\n","import React from 'react';\r\nimport SelectedFieldTemplate from './SelectedFieldTemplate';\r\nimport {connect} from 'react-redux';\r\n\r\nclass SelectedFields extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            from: 0\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param from {number}\r\n     * @param to {number}\r\n     */\r\n    canBeMoved( from, to){\r\n        let toNext = to - 1;\r\n        return this.from !== to && this.from !== toNext;\r\n    }\r\n\r\n    onDragStartHandle(event){\r\n        event.target.style.opacity = 1;\r\n        let newFrom = Number( event.target.getAttribute('from') );\r\n        this.setState(  {\r\n            from: newFrom\r\n        });\r\n    }\r\n\r\n    onDragEnterHandle(event){\r\n        event.target.style.opacity = 1;\r\n\r\n        let to = Number( event.target.getAttribute('to') );\r\n        if( this.canBeMoved(this.state.from, to) ){\r\n            if ( event.target.className === \"dropZone\" ) {\r\n                event.target.style.height = '50px';\r\n            }\r\n        }\r\n    }\r\n    onDragLeaveHandle(event){\r\n        event.target.style.opacity = 1;\r\n\r\n        if ( event.target.className === \"dropZone\" ) {\r\n            event.target.style.height = \"20px\";\r\n        }\r\n    }\r\n    onDragEndHandle(event){\r\n        event.target.style.opacity = 1;\r\n        if ( event.target.className === \"dropZone\" ) {\r\n            event.target.style.height = '20px';\r\n        }\r\n    }\r\n\r\n    ondropHandle(event){\r\n        event.target.style.opacity = 1;\r\n\r\n        event.preventDefault();\r\n        let to = Number( event.target.getAttribute('to') );\r\n        event.target.style.background = \"\";\r\n        if( this.canBeMoved(this.state.from, to) ){\r\n            this.props.swapFields(this.state.from, to);\r\n        }\r\n    }\r\n\r\n    onDragOverHandle = function (event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"SelectedFieldsContainer\" style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                height: '100vh'\r\n            }}>\r\n                <h3 className=\"heading\" onClick={()=> this.forceUpdate()}>Selected Fields</h3>\r\n                <div className=\"SelectedFields custom-scrollbar\" style={{\r\n                    flex: 'auto',\r\n                    overflowY: 'auto',\r\n                    paddingBottom: '30px',\r\n                    paddingRight: '25px'\r\n                }}>\r\n                    <div className=\"dropZone\"\r\n                         style={this.styles.dropZone}\r\n                         to={0}\r\n                         onDragOver={(event) => {\r\n                             this.onDragOverHandle(event)\r\n                         }}\r\n                         onDragEnter={(event) => {\r\n                             this.onDragEnterHandle(event)\r\n                         }}\r\n                         onDragLeave={(event) => {\r\n                             this.onDragLeaveHandle(event)\r\n                         }}\r\n                         onDrop={(event) => {\r\n                             this.onDragEndHandle(event);\r\n                             this.ondropHandle(event)\r\n                         }}/>\r\n\r\n                    { this.props.selectedFields && this.props.selectedFields.map( (field, index) => (\r\n                        <div style={{width: '100%'}} key={index} className={'drag-wrapper'}>\r\n\r\n                            <SelectedFieldTemplate\r\n                                from={index}\r\n                                onDragStartHandle={ this.onDragStartHandle.bind(this) }\r\n                                onDragEndHandle={ this.onDragEndHandle.bind(this) }\r\n\r\n                                field={field}\r\n                                fieldIndex={index}/>\r\n\r\n                            <div className=\"dropZone\"\r\n                                 style={this.styles.dropZone}\r\n                                 to={1+index}\r\n                                 onDragOver={(event) => {\r\n                                     this.onDragOverHandle(event)\r\n                                 }}\r\n                                 onDragEnter={(event) => {\r\n                                     this.onDragEnterHandle(event)\r\n                                 }}\r\n                                 onDragLeave={(event) => {\r\n                                     this.onDragLeaveHandle(event)\r\n                                 }}\r\n                                 onDrop={(event) => {\r\n                                     this.onDragEndHandle(event);\r\n                                     this.ondropHandle(event)\r\n                                 }}/>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    styles = {\r\n        dropZone: {\r\n            display: 'block',\r\n            width: '100%',\r\n            height: '20px',\r\n            border: '1px dashed #bbb',\r\n            transition: 'all .3s'\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        selectedFields: state.fields.selectedFields\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        swapFields: (from, to) => dispatch({type: 'SWITCH_SELECTED_FIELDS', from, to }),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedFields);\r\n","import React from 'react';\r\nimport './Schema.scss';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Schema = props => {\r\n    return (\r\n        <div className=\"Schema\">\r\n            <h3 className=\"heading\">Schema</h3>\r\n            <div>\r\n                <TextField\r\n                    label=\"Section Name\"\r\n                    defaultValue={props.schema.name}\r\n                    // helperText=\"Some important text\"\r\n                    variant=\"outlined\"\r\n                    onChange={ (event)=> {\r\n                        props.setSchemaName(event.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n            <br/>\r\n\r\n            <textarea name=\"schema\" id=\"schema\" cols=\"30\" rows=\"10\" className=\"custom-scrollbar\"\r\n                value={ JSON.stringify(props.schema, null, 4) }\r\n                onChange={ ()=> console.log('onchange') }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        schema: state.fields.schema\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setSchemaName: (schemaName) => dispatch({type: 'SET_SCHEMA_TITLE', schemaName})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Schema);\r\n","import React from 'react';\nimport './App.scss';\nimport './Typography.scss';\nimport FieldsList from './contianers/FieldsList/FieldsList';\nimport SelectedFields from './contianers/SelectedFields/SelectedFields';\nimport Schema from './contianers/Schema/Schema';\n\nexport default function App() {\n\n    return (\n        <div>\n            <div className=\"App\">\n                <div className=\"container\">\n                    <div className=\"fields-list custom-scrollbar\">\n                        <FieldsList/>\n                    </div>\n                    <div className=\"selected-fields custom-scrollbar\">\n                        <SelectedFields/>\n                    </div>\n                    <div className=\"generated-schema custom-scrollbar\">\n                        <Schema/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport fields from './fields';\r\n\r\nexport default combineReducers({ fields });\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}